- name: Déploiement complet de Bmarket
  hosts: bmarket
  become: true
  vars:
    ghcr_username: "{{ ghcr_username }}"
    ghcr_token: "{{ ghcr_token }}"
    domain_name: "{{ domain_name }}"
    postgres_user: "{{ lookup('env', 'POSTGRES_USER') }}"
    postgres_password: "{{ lookup('env', 'POSTGRES_PASSWORD') }}"
    postgres_db: "{{ lookup('env', 'POSTGRES_DB') }}"
    backup_dir: "/home/deploy/db_backups"

  tasks:

    - name: 📦 Installer les dépendances
      apt:
        name:
          - docker.io
          - docker-compose
          - nginx
          - certbot
          - python3-certbot-nginx
          - ufw
          - fail2ban
          - postgresql
          - postgresql-contrib
        state: present
        update_cache: true

    # 🛢️ Vérifier si PostgreSQL est déjà installé et en cours d'exécution
    - name: 🛢️ Vérifier si PostgreSQL est en cours d'exécution
      command: systemctl is-active postgresql
      register: pg_status
      changed_when: false
      ignore_errors: true

    # 🔄 Démarrer PostgreSQL si nécessaire
    - name: 🔄 Démarrer PostgreSQL
      systemd:
        name: postgresql
        state: started
        enabled: true
      when: pg_status.stdout != "active"

    # 🛢️ Créer l'utilisateur PostgreSQL
    - name: 🛢️ Créer l'utilisateur PostgreSQL
      become_user: postgres
      postgresql_user:
        name: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        role_attr_flags: CREATEDB

    # 📂 Vérifier si la base de données existe
    - name: 📂 Vérifier si la base de données existe
      become_user: postgres
      command: psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ postgres_db }}'"
      register: db_exists
      changed_when: false
      ignore_errors: true

    # 🛢️ Créer la base de données si elle n'existe pas
    - name: 🛢️ Créer la base de données PostgreSQL
      become_user: postgres
      postgresql_db:
        name: "{{ postgres_db }}"
        owner: "{{ postgres_user }}"
      when: db_exists.stdout != "1"

    # 📂 Créer un dossier de sauvegarde s'il n'existe pas
    - name: 📂 Créer un dossier pour stocker les backups
      file:
        path: "{{ backup_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0700"

    # 🛢️ Backup de la base de données avant chaque déploiement
    - name: 🛢️ Sauvegarde de la base de données avant déploiement
      become_user: postgres
      command: pg_dump -U {{ postgres_user }} -F c -b -v -f {{ backup_dir }}/bmarket_backup_$(date +%F_%H-%M-%S).dump {{ postgres_db }}
      ignore_errors: true

    # 🔑 Se connecter à GHCR
    - name: 🔑 Se connecter à GHCR
      shell: echo "{{ ghcr_token }}" | docker login ghcr.io -u "{{ ghcr_username }}" --password-stdin

    # 📦 Télécharger la dernière image Docker
    - name: 📦 Télécharger la dernière image Docker
      shell: docker pull ghcr.io/{{ ghcr_username }}/bmarket:latest

    # 🛑 Arrêter et supprimer l'ancien conteneur
    - name: 🛑 Arrêter et supprimer l'ancien conteneur (si existant)
      shell: docker rm -f bmarket || true

    # 🚀 Démarrer le conteneur
    - name: 🚀 Démarrer le conteneur
      shell: |
        docker run -d --name bmarket \
          -p 3000:3000 \
          -e DATABASE_URL="postgres://{{ postgres_user }}:{{ postgres_password }}@localhost/{{ postgres_db }}" \
          ghcr.io/{{ ghcr_username }}/bmarket:latest

    # 🔄 Configurer Nginx comme reverse proxy
    - name: 🔄 Configurer Nginx pour Bmarket
      copy:
        dest: "/etc/nginx/sites-available/bmarket"
        content: |
          server {
              listen 80;
              server_name {{ domain_name }} www.{{ domain_name }};

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

    # 🔗 Activer la configuration Nginx
    - name: 🔗 Activer la configuration Nginx
      file:
        src: "/etc/nginx/sites-available/bmarket"
        dest: "/etc/nginx/sites-enabled/bmarket"
        state: link

    # 🧹 Supprimer la configuration Nginx par défaut
    - name: 🧹 Supprimer la configuration par défaut
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent

    # 🔄 Redémarrer Nginx
    - name: 🔄 Redémarrer Nginx
      systemd:
        name: nginx
        state: restarted
        enabled: true

    # 🔒 Générer un certificat SSL avec Let's Encrypt
    - name: 🔒 Générer un certificat SSL avec Certbot
      shell: certbot --nginx -d {{ domain_name }} -d www.{{ domain_name }} --non-interactive --agree-tos -m contact@{{ domain_name }}

    # 🔄 Redémarrer Nginx après Certbot
    - name: 🔄 Redémarrer Nginx après Certbot
      systemd:
        name: nginx
        state: restarted
