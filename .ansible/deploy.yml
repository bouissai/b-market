- name: Déploiement complet de Bmarket
  hosts: bmarket
  become: true
  vars:
    ghcr_username: "{{ ghcr_username }}"
    ghcr_token: "{{ ghcr_token }}"
    domain_name: "{{ domain_name }}"
    postgres_user: "{{ lookup('env', 'POSTGRES_USER') }}"
    postgres_password: "{{ lookup('env', 'POSTGRES_PASSWORD') }}"
    postgres_db: "{{ lookup('env', 'POSTGRES_DB') }}"
    backup_dir: "/home/deploy/db_backups"

  tasks:

    # 📌 Affichage des variables pour le debug
    - name: 🐛 Afficher les valeurs des variables
      debug:
        msg:
          - "PostgreSQL User: {{ postgres_user }}"
          - "PostgreSQL Password: {{ postgres_password }}"
          - "PostgreSQL DB: {{ postgres_db }}"
          - "GHCR Username: {{ ghcr_username }}"
          - "GHCR Token: {{ ghcr_token }}"
          - "Domain Name: {{ domain_name }}"
          - "Backup Directory: {{ backup_dir }}"

    # 📦 Installer les dépendances
    - name: 📦 Installer les paquets nécessaires
      apt:
        name:
          - docker.io
          - docker-compose
          - nginx
          - certbot
          - python3-certbot-nginx
          - ufw
          - fail2ban
          - postgresql
          - postgresql-contrib
        state: present
        update_cache: true

    # 🔄 Vérifier et démarrer PostgreSQL
    - name: 🔄 Vérifier si PostgreSQL est en cours d'exécution
      command: systemctl is-active postgresql
      register: pg_status
      changed_when: false
      ignore_errors: true

    - name: 🚀 Afficher l'état de PostgreSQL
      debug:
        msg: "État actuel de PostgreSQL : {{ pg_status.stdout }}"

    - name: 🚀 Démarrer PostgreSQL si nécessaire
      systemd:
        name: postgresql
        state: started
        enabled: true
      when: pg_status.stdout != "active"
    
    - name: Debug PostgreSQL User
      debug:
        msg: "PostgreSQL User: {{ postgres_user }}, Password: {{ postgres_password }}"

    - name: 🔥 Supprimer l'utilisateur PostgreSQL s'il existe
      become_user: postgres
      command: psql -c "DROP USER IF EXISTS {{ postgres_user }};"
      ignore_errors: true

    - name: 🛢️ Vérifier si l'utilisateur PostgreSQL existe
      become_user: postgres
      command: psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ postgres_user }}'"
      register: user_exists
      changed_when: false
      ignore_errors: true

    - name: 🛢️ Créer l'utilisateur PostgreSQL
      become_user: postgres
      command: psql -c "CREATE USER {{ postgres_user }} WITH PASSWORD '{{ postgres_password }}'; ALTER USER {{ postgres_user }} CREATEDB;"
      when: user_exists.stdout != "1"
      register: create_user_result
      ignore_errors: true


    # 📂 Vérifier l'existence de la base de données
    - name: 📂 Vérifier si la base de données existe
      become_user: postgres
      command: psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ postgres_db }}'"
      register: db_exists
      changed_when: false
      ignore_errors: true

    - name: 🛢️ Afficher le statut de la base de données PostgreSQL
      debug:
        msg: "Résultat de la vérification de la base de données PostgreSQL : {{ db_exists.stdout }}"

    # 🛢️ Créer la base de données si elle n'existe pas
    - name: 🛢️ Créer la base de données PostgreSQL
      become_user: postgres
      command: psql -c "CREATE DATABASE {{ postgres_db }} OWNER {{ postgres_user }}"
      when: db_exists.stdout != "1"
      register: create_db_result

    - name: 🛢️ Afficher le résultat de la création de la base de données
      debug:
        msg: "Création de la base de données PostgreSQL : {{ create_db_result.stderr if create_db_result.stderr else 'Succès' }}"

    # 🔑 Se connecter à GitHub Container Registry (GHCR)
    - name: 🔑 Se connecter à GHCR
      shell: |
        set -x
        echo "{{ ghcr_token }}" | docker login ghcr.io -u "{{ ghcr_username }}" --password-stdin
      register: ghcr_login_result
      ignore_errors: true

    - name: 🔑 Afficher le résultat de la connexion à GHCR
      debug:
        msg: "Connexion à GHCR : {{ ghcr_login_result.stderr if ghcr_login_result.stderr else 'Succès' }}"

    # 📦 Télécharger l'image Docker
    - name: 📦 Télécharger la dernière image Docker
      shell: docker pull ghcr.io/{{ ghcr_username }}/bmarket:latest
      register: docker_pull_result
      ignore_errors: true

    - name: 📦 Afficher le résultat du téléchargement de l'image Docker
      debug:
        msg: "Téléchargement de l'image Docker : {{ docker_pull_result.stderr if docker_pull_result.stderr else 'Succès' }}"

    # 🛑 Arrêter l'ancien conteneur
    - name: 🛑 Arrêter et supprimer l'ancien conteneur (si existant)
      shell: docker rm -f bmarket || true

    - name: 🚨 Vérification de DATABASE_URL avant le déploiement
      debug:
        msg: "DATABASE_URL = postgresql://{{ postgres_user }}:{{ postgres_password }}@127.0.0.1:5432/{{ postgres_db }}"

    # 🚀 Démarrer le conteneur avec PostgreSQL
    - name: 🚀 Démarrer le conteneur Docker
      shell: |
        set -x
        docker run -d --name bmarket \
          -p 3000:3000 \
          -e DATABASE_URL="postgresql://{{ postgres_user }}:{{ postgres_password }}@127.0.0.1:5432/{{ postgres_db }}" \
          ghcr.io/{{ ghcr_username }}/bmarket:latest
      register: docker_run_result
      ignore_errors: true

    - name: 🚀 Afficher le résultat du démarrage du conteneur Docker
      debug:
        msg: "Démarrage du conteneur Docker : {{ docker_run_result.stderr if docker_run_result.stderr else 'Succès' }}"

  handlers:
    - name: Redémarrer PostgreSQL
      systemd:
        name: postgresql
        state: restarted
