// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String?  @unique
  cart      Cart?    @relation
  orders    Order[]
}

model Article {
  id           String      @id @default(cuid())
  name         String      @unique
  unit         String
  price        Float
  image        String
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name])
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  quantity  Int     @default(1)

  @@unique([cartId, articleId]) // ðŸš€ Ajout de la contrainte UNIQUE
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  total      Float
  note       String?
  status     String      @default("PENDING") // "pending", "completed", etc.
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  quantity  Int     @default(1)
  price     Float

  @@unique([orderId, articleId])
}